// Built-in functions
function abs(n: s64): s64 {
   if (n > 0) n else n * -1
}

////////// Sort Hiearchy ///////////////////
// Sort Literals
typedef Axes = X | Y
typedef Directions = DLeft | DRight | DTop | DBottom

// Built-in Object ID type
typedef OID = s64

// Nodes of the hierarchy
typedef Node = Universe
    | Actions
    | Rectangles
    | Monitors
    | Windows
    | Window_Action
    | Open_Window
    | Move

// Sorts and attributes
input relation Object(oid: OID, sort: Node)
primary key (x) x.oid

typedef AttributeValue = Attr_Width{width: s64}
    | Attr_Height{height: s64} 
    | Attr_Target{target: OID}
    | Attr_Distance{distance: s64}
    | Attr_Direction{direction: Directions}

input relation Attribute(oid: OID, val: AttributeValue)
primary key (x) x.oid

// Encode Hiearchy facts
output relation Link(_1: Node, _2: Node)
Link(Actions, Universe).
Link(Window_Action, Actions).
Link(Open_Window, Window_Action).
Link(Move, Window_Action).
Link(Rectangles, Universe).
Link(Monitors, Rectangles).
Link(Windows, Rectangles).

relation Is_A(_1: OID, _2: Node)
Is_A(obj, sort) :- Object(obj, sort).

relation Instance(_1: OID, _2: Node)
Instance(obj, sort) :- Is_A(obj, sort).
Instance(obj, sort1) :- Instance(obj, sort2), Link(sort1, sort2).

// Statics
relation Opposite_Direction(_1: Directions, ret: Directions)
relation Opposite_Axis(_1: Axes, ret: Axes)
relation Axis(_1: Directions, ret: Axes)
relation Direction_Factor(_1: Directions, ret: s64)

/////// Fluents //////////////////
// Basic
typedef FluentValue = Coordinate{coordinate_1: OID, coordinate_2: Axes, coordinate_ret: s64 }
    | Moving{moving_1: OID}

input relation InFluent(value: FluentValue)
primary key (x) fluent_primary_key(x.value)

function fluent_primary_key(x: FluentValue): OID {
    match(x) {
        Coordinate{.coordinate_1 = y} -> y,
        Moving{.moving_1 = y} -> y
    }
}

output relation OutFluent(value: FluentValue)

// Defined
relation Side(_1: OID, _2: Directions, _3: s64)
relation On_Same_Line(_1: OID, _2: OID, _3: Axes)
relation Overlaps(_1: OID, _2: OID)
relation Attracts(_1: OID, _2: OID, _3: Directions)
relation Not_Final_Coordinate(_1: OID, _2: Axes, _3: s64)
output relation Final_Coordinate(_1: OID, _2: Axes, _3: s64)
relation Not_Snapped(_1: OID, _2: OID)
relation Snapped(_1: OID, _2: OID)
relation Snapped_To_Corner(_1: OID, _2: OID)
relation Stationary(_1: OID)
relation Predistance(_1: OID, _2: OID, _3: s64)
relation Not_Distance(_1: OID, _2: OID, _3: s64)
relation Distance(_1: OID, _2: OID, _3: s64)
relation Not_Closest(_1: OID, _2: OID)
relation Closest(_1: OID, _2: OID)
relation Nearest_Side(_1: OID, _2: OID, _3: Directions)
relation Nearest_Corner(_1: OID, _2: OID, _3: Directions, _4: Directions)

///////////// Axioms ///////////////
Opposite_Direction(DLeft, DRight).
Opposite_Direction(DTop, DBottom).
Opposite_Direction(a, b) :-
    Opposite_Direction(b, a).
Opposite_Axis(X, Y).
Opposite_Axis(Y, X).
Axis(DLeft, X).
Axis(DTop, Y).
Axis(dir, a) :-
    Axis(dir__prime, a),
    Opposite_Direction(dir, dir__prime).

Direction_Factor(DRight, 1).
Direction_Factor(DBottom, 1).
Direction_Factor(DLeft, -1).
Direction_Factor(DTop, -1).

Side(rectangle, DLeft, value) :-
    InFluent(Coordinate{rectangle, X, value}).

Side(rectangle, DTop, value) :-
    InFluent(Coordinate{rectangle, Y, value}).

Side(rectangle, DRight, r_value) :-
    Side(rectangle, DLeft, l_value),
    Attribute(rectangle, Attr_Width{w}),
    var r_value = l_value + w.

Side(rectangle, DBottom, b_value) :-
    Side(rectangle, DLeft, t_value),
    Attribute(rectangle, Attr_Width{h}),
    var b_value = t_value + h.

On_Same_Line(a, b, axis) :-
    Side(a, dir, a1),
    Axis(dir, axis),
    Opposite_Direction(dir, dir__prime),
    Side(a, dir__prime, a2),
    Side(b, dir, b1),
    Side(b, dir__prime, b2),
    a != b,
    a1 < b2,
    a2 > b1.

Overlaps(a, b) :-
    On_Same_Line(a, b, X),
    On_Same_Line(a, b, Y).

Predistance(a, b, b) :-
    Instance(a, Windows),
    Instance(b, Windows),
    On_Same_Line(a, b, axis),
    Axis(dir, axis),
    not Overlaps(a, b),
    Side(a, dir, e1),
    Side(b, dir__prime, e2),
    Opposite_Direction(dir, dir__prime),
    var d = abs(e1 - e2).

Predistance(a, b, d) :-
    Instance(a, Windows),
    Instance(b, Monitors),
    Side(a, dir, e1),
    Side(b, dir, e2),
    var d = abs(e1 - e2).

Predistance(a, b, d) :-
    Predistance(b, a, d).

Not_Distance(a, b, d) :-
    Predistance(a, b, d),
    Predistance(a, b, d__prime),
    d__prime < d.

Distance(a, b, d) :-
    Predistance(a, b, d),
    not Not_Distance(a, b, d).

Nearest_Corner(a, b, dir, dir__prime) :-
    Nearest_Side(a, b, dir),
    Axis(dir, ax),
    Opposite_Axis(ax, ax__prime),
    Axis(dir__prime, ax__prime),
    Opposite_Direction(dir__prime, dir__prime__prime),
    Side(a, dir__prime, a1),
    Side(a, dir__prime, b1),
    Side(a, dir__prime__prime, a2),
    Side(b, dir__prime__prime, b2),
    abs(a1 - b1)  <  abs(2 - b2).

Nearest_Corner(a, b, dir, dir__prime) :-
    Nearest_Corner(a, b, dir__prime, dir).

Not_Closest(a, b) :- 
    Distance(a, b, d),
    Distance(a, c, d__prime),
    d__prime < d.

Closest(a, b) :-
    Instance(a, Windows),
    Instance(b, Rectangles),
    not Not_Closest(a, b).

OutFluent(Coordinate{a, X, 0}) :-
    Instance(action, Open_Window),
    Attribute(action, Attr_Target{a}).

OutFluent(Coordinate{a, Y, 0}) :-
    Instance(action, Open_Window),
    Attribute(action, Attr_Target{a}).

Nearest_Side(a, b, dir) :-
    Instance(a, Windows),
    Instance(b, Windows),
    Side(a, dir, edge_a),
    Opposite_Direction(dir, dir__prime),
    Side(b, dir__prime, edge_b),
    Distance(a, b, d),
    edge_a - edge_b == d.

Nearest_Side(w, m, dir) :-
    Instance(w, Windows),
    Instance(m, Monitors),
    Side(w, dir, edge_w),
    Side(m, dir, edge_m),
    Distance(w, m, d),
    var d__prime = edge_w - edge_m,
    d == d__prime.

Nearest_Side(a, b, dir) :-
    Opposite_Direction(dir, dir__prime),
    Nearest_Side(b, a, dir__prime).

OutFluent(Coordinate{window, axis, new_coord}) :-
    Instance(action, Move),
    Attribute(action, Attr_Target{window}),
    Attribute(action, Attr_Distance{d}),
    Attribute(action, Attr_Direction{dir}),
    Axis(dir, axis),
    Direction_Factor(dir, f),
    InFluent(Coordinate{window, axis, coord}),
    var new_coord = coord + (d * f).

Not_Snapped(a, b) :-
    InFluent(Moving{a}),
    Attracts(a, b, dir),
    Attracts(c, a, dir__prime),
    dir__prime != dir.
    
Snapped(a, b) :-
    InFluent(Moving{a}),
    Attracts(a, b, dir),
    not Not_Snapped(a, b).

Snapped_To_Corner(a, b) :-
    Snapped(a, b),
    Nearest_Side(a, b, dir),
    Axis(dir, ax),
    Opposite_Axis(ax, ax__prime),
    Nearest_Corner(a, b, dir, dir__prime),
    Side(a, dir__prime, side_a),
    Side(b, dir__prime, side_b),
    abs(side_a - side_b) < (20 as s64).

Final_Coordinate(a, ax, new_coord) :-
   Snapped(a, b),
   Distance(a, b, d),
   Nearest_Side(a, b, dir),
   Axis(dir, ax),
   InFluent(Coordinate{a, ax, coord}),
   Direction_Factor(dir, f),
   var new_coord = coord + d * f.
   
Final_Coordinate(a, ax__prime, new_coord) :-
   Snapped(a, b),
   Snapped_To_Corner(a, b),
   Nearest_Side(a, b, dir),
   Axis(dir, ax),
   Opposite_Axis(ax, ax__prime),
   Nearest_Corner(a, b, dir, dir__prime),
   InFluent(Coordinate{a, ax__prime, coord}),
   Side(a, dir__prime, side_a),
   Side(b, dir__prime, side_b),
   var new_coord = coord + (side_b - side_a).

Final_Coordinate(a, ax__prime, coord) :-
    Snapped(a, b),
    not Snapped_To_Corner(a, b),
    Nearest_Side(a, b, dir),
    Axis(dir, ax),
    Opposite_Axis(ax, ax__prime),
    InFluent(Coordinate{a, ax__prime, coord}).

Not_Final_Coordinate(window, axis, coord) :-
    InFluent(Coordinate{window, axis, coord}),
    Snapped(window, other).

Final_Coordinate(window, axis, coord) :-
    InFluent(Coordinate{window, axis, coord}),
    not Not_Final_Coordinate(window, axis, coord).

Attracts(a, b, dir) :-
    Distance(a, b, d),
    d < (20 as s64),
    Closest(a, b),
    Nearest_Side(b, a, dir).

Nearest_Side(a, b, dir) :-
    Instance(a, Windows),
    Instance(b, Windows),
    Side(a, dir, edge_a),
    Opposite_Direction(dir, dir__prime),
    Side(b, dir__prime, edge_b),
    Distance(a, b, d),
    edge_a - edge_a == d.

Nearest_Side(w, m, dir) :-
    Instance(w, Windows),
    Instance(m, Monitors),
    Side(w, dir, edge_w),
    Side(m, dir, edge_m),
    Distance(w, m, d),
    edge_w - edge_m == d.
       
Nearest_Side(a, b, dir) :-
    Opposite_Direction(dir, dir__prime),
    Nearest_Side(b, a, dir__prime).
