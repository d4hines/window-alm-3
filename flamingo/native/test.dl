typedef OID = s64
input relation Universe(
    oid: OID,
    universeChild: UniverseChild // Universe is an abstract class, so an instance of universe
                         // must be one of its derived classes
)
primary key (u) u.oid

typedef UniverseChild =
    Action {
        actionChild: ActionChild // Action is also an abstract class.
    }
    |
    Rectangle{
        x: s64,
        y: s64,
        width: s64,
        height: s64,
        rectangleChild: RectangleChild
    }
typedef ActionChild =
    NoopAction {}
    |
    MoveAction { // final class, no `child` field.
        target: OID, // must be a rectangle
        delta_x: s64,
        delta_y: s64
    }

typedef Color = Red | Blue

typedef RectangleChild =
    MagicRectangle {
        color: Color
    }

output relation Output_MagicRectangle(oid: OID, x: s64, y: s64, width: s64, height: s64, color: Color)

Output_MagicRectangle(oid, new_x, new_y, width, height, new_color) :-
    Universe(
        .oid = oid,
        .universeChild = Rectangle {
                .x = x,
                .y= y,
                .width = width,
                .height = height }),
    Universe(.universeChild = Action {
        .actionChild = MoveAction {
            .target = oid,
            .delta_x = delta_x,
            .delta_y = delta_y
        }
    }),
    var new_x = x + delta_x,
    var new_y = y + delta_y,
    var new_color = if (new_x + width < 1000 and new_y + height < 1000) { Blue } else { Red }.

// start;
// insert Universe("obj", Rectangle{1000, 1000, 100, 100, MagicRectangle{Blue}});
// insert Universe("action", Action{MoveAction{"obj", 1, 1}});
// commit dump_changes;
