module Window_demo
    enums
        Axes :: { X, Y }.
        Directions :: { DLeft, DRight, DTop, DBottom }.
        Group_Icons :: { NoIcon, Form, Disband }.
    sorts
        Rectangles :: Universe
            attributes
                Width : Integers
                Height : Integers.
        Monitors :: Rectangles.
        Windows :: Rectangles.
        Window_Action :: Actions
            attributes
                Target : Windows.
        Open_Window :: Window_Action.
        Move :: Window_Action
            attributes
                Magnitude_X : Integers
                Magnitude_Y : Integers.
        Toggle_Grouping :: Window_Action.
        Set_Monitor_Bounds :: Actions
            attributes
                Monitor : Monitors
                Monitor_X : Integers
                Monitor_Y : Integers.
    statics
        Opposite_Direction : Directions -> Directions
        Opposite_Axis : Axes -> Axes
        Axis : Directions -> Axes
        Direction_Factor : Directions -> Integers
        Snapping_Threshold : Integers
        Corner_Snapping_Threshold : Integers
    fluents
        basic
            Coordinate : Rectangles x Axes -> Integers
            Moving : Windows -> Booleans
            Grouped_With : Windows x Windowx -> Booleans
        defined
            Side : Rectangles x Directions x Integers -> Booleans
            On_Same_Line : Rectangles x Rectangles x Axes -> Booleans
            Overlaps : Rectangles x Rectangles -> Booleans
            Attracts : Rectangles x Rectangles x Directions -> Booleans
            Not_Snapped : Windows x Rectangles -> Booleans
            Snapped : Windows x Rectangles -> Booleans
            Snapped_To_Corner : Windows x Rectangles -> Booleans
            Distance : Windows x Rectangles x Integers -> Booleans
            Closest : Windows x Rectangles -> Booleans
            Nearest_Side : Windows x Rectangles x Directions -> Booleans
            Nearest_Corner : Windows x Rectangles x Directions x Directions -> Booleans
            In_Snapped_Group : Windows -> Booleans
            Connected : Windows x Windows -> Booleans
            Not_In_Singleton_Group : Windows -> Booleans
            output Group_Icon : Windows x Group_Icons -> Booleans
            output Final_Coordinate : Windows x Axes x Integers -> Booleans
            Final_Overlaps : Windows x Windows -> Booleans
            Final_Side : Windows x Directions x Integers -> Booleans
            Final_On_Same_Line : Windows x Windows x Axes -> Booleans
    axioms
        Snapping_Threshold = 30.
        Corner_Snapping_Threshold = 30.

        Opposite_Direction(DLeft) = DRight.
        Opposite_Direction(DTop) = DBottom.
        Opposite_Direction(a) = b if
            Opposite_Direction(b) = a.
        Opposite_Axis(X) = Y.
        Opposite_Axis(Y) = X.
        Axis(DLeft) = X.
        Axis(DTop) = Y.
        Axis(dir, a) if
            Axis(dir', a),
            Opposite_Direction(dir, dir').

        Direction_Factor(DRight) = 1.
        Direction_Factor(DBottom) = 1.
        Direction_Factor(DLeft) = -1.
        Direction_Factor(DTop) = -1.

        Side(rectangle, DLeft, value) if
            Coordinate(rectangle, X) = value.
        Side(rectangle, DTop, value) if
            Coordinate(rectangle, Y) = value.

        Side(rectangle, DRight, r_value) if
            Side(rectangle, DLeft, l_value),
            Width(rectangle) = w,
            #ddlog { var r_value = l_value + w }.

        Side(rectangle, DBottom, b_value) if
            Side(rectangle, DTop, t_value),
            Height(rectangle) = h,
            #ddlog { var b_value = t_value + h }.

        Nearest_Side(a, b, dir) if
            Instance(a, Windows),
            Instance(b, Windows),
            Side(a, dir, edge_a),
            Opposite_Direction(dir) = dir',
            Side(b, dir', edge_b),
            Distance(a, b, d),
            #ddlog { edge_a - edge_b == d },
            Axis(dir) = ax,
            Opposite_Axis(ax) = ax',
            On_Same_Line(a, b, ax').

        Nearest_Side(w, m, dir) if
            Instance(w, Windows),
            Instance(m, Monitors),
            Side(w, dir, edge_w),
            Side(m, dir, edge_m),
            Distance(w, m, d),
            #ddlog { abs(edge_w - edge_m) == d },
            Axis(dir) = ax,
            Opposite_Axis(ax) = ax',
            On_Same_Line(w, m, ax').

        Nearest_Side(a, b, dir) if
            Instance(a, Windows),
            Instance(b, Windows),
            Opposite_Direction(dir) = dir',
            Nearest_Side(b, a, dir').

        Nearest_Side(a, b, dir) if
            Instance(b, Windows),
            Instance(a, Monitors),
            Nearest_Side(b, a, dir).

        Nearest_Corner(a, b, dir, dir') if
            Nearest_Side(a, b, dir),
            Axis(dir) = ax,
            Opposite_Axis(ax) = ax',
            Axis(dir') = ax',
            Opposite_Direction(dir') = dir'',
            Side(a, dir', a1),
            Side(b, dir', b1),
            Side(a, dir'', a2),
            Side(b, dir'', b2),
            #ddlog { abs(a1 - b1)  <  abs(a2 - b2) }.

        Nearest_Corner(a, b, dir, dir') if
            Nearest_Corner(a, b, dir', dir).

        On_Same_Line(a, b, axis) if
            Side(a, dir, a1),
            Axis(dir) = axis,
            Opposite_Direction(dir) = dir',
            Side(a, dir') = a2,
            Side(b, dir) = b1,
            Side(b, dir') = b2,
            a != b,
            a1 < b2,
            a2 > b1.

        Overlaps(a, b) if
            On_Same_Line(a, b, X),
            On_Same_Line(a, b, Y).

        Distance(a, b, min_d) if
            Instance(a, Windows),
            Instance(b, Windows),
            -Overlaps(a, b),
            On_Same_Line(a, b, axis),
            Opposite_Axis(axis) = axis',
            Axis(dir) = axis',
            Side(a, dir, e1),
            Side(b, dir', e2),
            Opposite_Direction(dir, dir'),
            #ddlog { var d = abs(e1 - e2) },
            #ddlog { var min_d = Aggregate((a, b), group_min(d)) }.

        Distance(a, b, min_d) if
            Instance(a, Windows),
            Instance(b, Monitors),
            Side(a, dir, e1),
            Side(b, dir, e2),
            #ddlog { var d = abs(e1 - e2) },
            #ddlog { var min_d = Aggregate((a, b), group_min(d)) }.

        Distance(a, b, d)  if Distance(b, a, d).

        Occurs(action) causes Coordinate(a, X) = 0 if
            Instance(action, Open_Window),
            Target(action, a).

        Occurs(action) causes Coordinate(a, Y) = 0 if
            Instance(action, Open_Window),
            Target(action, a).

        Occurs(action) causes Coordinate(m, X) = x' if
            Instance(action, Set_Monitor_Bounds),
            Monitor(action, m),
            Monitor_X(action, x').

        Occurs(action) causes Coordinate(m, Y) = y if
            Instance(action, Set_Monitor_Bounds),
            Monitor(action, m),
            Monitor_Y(action, y).

        Occurs(action) causes Coordinate(target, X) = new_coord if
            Instance(action, Move),
            Target(action, target),
            Magnitude_X(action, m),
            Coordinate(target, X) = coord,
            #ddlog { var new_coord = coord + m }.

        Occurs(action) causes Coordinate(target, Y) = new_coord if
            Instance(action, Move),
            Target(action, target),
            Magnitude_Y(action, m),
            Coordinate(target, Y) = coord,
            #ddlog { var new_coord = coord + m }.

        Occurs(action) causes Coordinate(window, X) = new_coord if
            Instance(action, Move),
            Target(action, target),
            Grouped_With(target, window) = true,
            Magnitude_X(action, m),
            Coordinate(window, X) = coord,
            #ddlog { var new_coord = coord + m }.

        Occurs(action) causes Coordinate(window, Y) = new_coord if
            Instance(action, Move),
            Target(action, target),
            Grouped_With(target, window) = true,
            Magnitude_Y(action, m),
            Coordinate(window, Y) = coord,
            #ddlog { var new_coord = coord + m }.

        Occurs(action) causes Moving(window) = true if
            Instance(action, Move),
            Target(action, target),
            Grouped_With(target, window) = true.

        Occurs(action) causes -Moving(other) if
            Instance(action, Move),
            Target(action, window),
            Instance(other, Windows),
            -Grouped_With(window, other).

        Closest(a, b) if
            Distance(a, b, d),
            #ddlog { var min_d = Aggregate((a, b), group_min(d)) }.
        
        Not_Snapped(a, b) if
            Moving(a),
            Attracts(b, a, dir),
            Attracts(c, a, dir'),
            b != c,
            dir' != dir.

        Snapped(a, b) if
            Moving(a),
            Attracts(b, a, dir),
            -Not_Snapped(a, b).

        Snapped_To_Corner(a, b) if
            Snapped(a, b),
            Nearest_Side(a, b, dir),
            Axis(dir) = ax,
            Opposite_Axis(ax) = ax',
            Nearest_Corner(a, b, dir, dir'),
            Side(a, dir', side_a),
            Side(b, dir', side_b),
            #ddlog { abs(side_a - side_b) < static_Corner_Snapping_Threshold() },
            Opposite_Direction(dir') = opposite_dir,
            -Nearest_Corner(a, b, opposite_dir, _).

        Final_Coordinate(a, ax, new_coord) if
            Grouped_With(b, a),
            Snapped(b, c),
            Distance(c, b, d),
            Nearest_Side(b, c, dir),
            Axis(dir) = ax,
            Coordinate(a, ax) = coord,
            Direction_Factor(dir, f),
            #ddlog { var new_coord = coord + d * f }.

        Final_Coordinate(a, ax', new_coord) if
            Grouped_With(b, a),
            Snapped(b, c),
            Snapped_To_Corner(b, c),
            Nearest_Side(b, c, dir),
            Axis(dir) = ax,
            Opposite_Axis(ax) = ax',
            Nearest_Corner(b, c, dir, dir'),
            Coordinate(a, ax') = coord,
            Side(b, dir', side_b),
            Side(c, dir', side_c),
            #ddlog { var new_coord = coord + (side_c - side_b) }.

         Final_Coordinate(a, ax, coord) if
            Coordinate(a, ax) = coord,
            Grouped_With(a, b),
            Snapped(b, c),
            -Snapped_To_Corner(b, c),
            Nearest_Side(b, c, dir),
            Axis(dir, ax'),
            Opposite_Axis(ax', ax).

        In_Snapped_Group(a) if
            Grouped_With(a, b),
            Snapped(b, _).

        Final_Coordinate(a, axis, coord) if
            Coordinate(a, axis) = coord,
           -In_Snapped_Group(a).

        Attracts(a, b, dir) if
            Distance(a, b, d),
            #ddlog { d < static_Snapping_Threshold() },
            Closest(b, a),
            Nearest_Side(a, b, dir),
            -Grouped_With(a, b).

        Connected(a, b) if
            Instance(a, Windows),
            Instance(b, Windows),
            -Final_Overlaps(a, b),
            Final_On_Same_Line(a, b, axis),
            Opposite_Axis(axis, axis'),
            Axis(dir, axis'),
            Final_Side(a, dir, e1),
            Final_Side(b, dir', e2),
            Opposite_Direction(dir, dir'),
            #ddlog { e1 - e2 == 0 }.

        Final_Side(rectangle, DLeft, value) if
            Final_Coordinate(rectangle, X, value).

        Final_Side(rectangle, DTop, value) if
            Final_Coordinate(rectangle, Y, value).

        Final_Side(rectangle, DRight, r_value) if
            Final_Side(rectangle, DLeft, l_value),
            Width(rectangle, w),
            #ddlog { var r_value = l_value + w }.

        Final_Side(rectangle, DBottom, b_value) if
            Final_Side(rectangle, DTop, t_value),
            Height(rectangle, h),
            #ddlog { var b_value = t_value + h }.

        Final_On_Same_Line(a, b, axis) if
            Final_Side(a, dir, a1),
            Axis(dir, axis),
            Opposite_Direction(dir, dir'),
            Final_Side(a, dir', a2),
            Final_Side(b, dir, b1),
            Final_Side(b, dir', b2),
            a != b,
            a1 < b2,
            a2 > b1.

        Final_Overlaps(a, b) if
            Final_On_Same_Line(a, b, X),
            Final_On_Same_Line(a, b, Y).

        Connected(b, a) if Connected(a, b).
        Connected(a, c) if
            Connected(a, b),
            Connected(b, c).

        Grouped_With(a, a) if Instance(a, Windows).

        Occurs(action) causes Grouped_With(a, b) if
            Instance(action, Toggle_Grouping),
            Target(action, a),
            Connected(a, b).

        Occurs(action) causes Grouped_With(b, a) if
            Instance(action, Toggle_Grouping),
            Target(action, a),
            Connected(a, b).
        
        Coordinate(a, ax) = coord if
            Instance(action, Toggle_Grouping),
            Target(action, a),
            Final_Coordinate(a, ax, coord).

        Not_In_Singleton_Group(a) if
            Grouped_With(a, b),
            a != b.

        Group_Icon(a, NoIcon) if
            Instance(a, Windows),
            -Connected(a, _),
            -Not_In_Singleton_Group(a).

        Group_Icon(a, Form) if
            Connected(a, b),
            -Not_In_Singleton_Group(a).

        Group_Icon(a, Disband) if
            Not_In_Singleton_Group(a).



        Occurs(action) causes Coordinate(2, X) = 220 if
            Instance(action, Move),
            Target(action, 1),
            Magnitude_X(action, 10),
            Grouped_With(0, 2),
            Coordinate(2, X) = 210.
    