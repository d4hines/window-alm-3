% Sorts are like types.
sorts
    $ The `::` is called specialization.
    % Just like 
    % `class Square extends Rectangle` in Java/Typescript
    rectangles :: universe
        % Attributes are like readonly properties
        attributes
            width : integers
            height : integers
    axes :: { x, y }
    drag :: action
        attributes
            target : rectangles
            diff : axes -> integers
    magic_rectangles :: rectangles
    colors :: { red, blue }
fluents
    basic
        total coordinates : rectangles x axes -> integers
    defined
        in_special_area : rectangles -> booleans
        rectangle_color : magic_rectangles x colors -> booleans
axioms
    % Two kinds of aximos:
    % State constraints, which take form
    % p if q
    % Reads: p implies q, or, if p is true in a given state, then q is also true in that state.

    % For all magic_rectangles Rect, in_special_area(Rect) implies rectangle_color(Rect, blue).
    rectangle_color(Rect, blue) if
        in_special_area(Rect).

    rectangle_color(Rect, red) if
        -in_special_area(Rect).

    in_special_area(Rect) if
        width(Rect) = W,
        height(Rect) = H,
        coorindates(Rect, x) = X,
        coorindates(Rect, y) = Y,
        X + W < 1000,
        Y + H < 1000.

    occurs(Action) causes coordinate(Target, Axis) = Coord + Diff if
        instance(Action, drag),
        target(Action) = Target,
        coordinate(Target, Axis) = Coord,
        diff(Action, Axis) = Diff.
